        -:    0:Source:Password.cpp
        -:    0:Graph:Password.gcno
        -:    0:Data:Password.gcda
        -:    0:Runs:1
        -:    1:#include "Password.h"
        -:    2:#include <string>
        -:    3:#include <cstring>
        -:    4:using std::string;
        -:    5:
        -:    6:/*
        -:    7:  The function receives a string counts how many times the same character 
        -:    8:  occurs at the beginning of the string, before any other characters (or the
        -:    9:  end of the string). The function is case-sensitive so 'Z' is different than
        -:   10:  'z' and any ASCII characters are allowed.
        -:   11:*/
       12:   12:int Password::count_leading_characters(string phrase){
       12:   13:  int repetition = 1;
       12:   14:  int index = 0;
       12:   15:  if (phrase.empty()){
        1:   16:    return 0;
        -:   17:  }
       17:   18:  while( index < phrase.length()-1 && phrase[index] == phrase[index+1] ){
        6:   19:    repetition++;
        6:   20:    index++;
        -:   21:  }
       11:   22:  return repetition;
        -:   23:}
        -:   24:
        -:   25:  /*
        -:   26:  returns whether the phrase has both at least one upper-case letter and at least one lower-case letter
        -:   27:  */
       15:   28:bool Password::has_mixed_case(string phrase){
       15:   29:  bool upper = false;
       15:   30:  bool lower = false;
      147:   31:  for (int i = 0 ; i < phrase.size(); i++){
      132:   32:    if (isupper(phrase[i])){
       15:   33:      upper = true;
        -:   34:    }
      132:   35:    if (islower(phrase[i])){
       33:   36:      lower = true;
        -:   37:    }
        -:   38:  }
       15:   39:  return upper && lower;
        -:   40:}
        -:   41:
       18:   42:Password::Password(){
       18:   43:  pass_history.push_back("ChicoCA-95929");
       18:   44:}
        -:   45:
        -:   46:/*
        -:   47:  receives a password and sets the latest in pass_history to it if and only
        -:   48:  if it meets all criteria:
        -:   49:    1. The password is at least 8 letters long
        -:   50:    2. It has no more than 3 of the same leading characters
        -:   51:    3. It has mixed case (at least one upper case and at least one lower case)
        -:   52:    4. It was not a previous password in the history
        -:   53:  */
        9:   54:  void Password::set(string x){
        9:   55:    if (x.size() >= 8 && count_leading_characters(x) <= 3 && has_mixed_case(x)){
       18:   56:      for (int i = 0; i < pass_history.size(); i++){
       12:   57:        if (pass_history[i] == x){
        1:   58:          return;
        -:   59:        }
        -:   60:      }
        6:   61:      pass_history.push_back(x);
        -:   62:    }
        -:   63:  }
        -:   64:
        -:   65:  /*
        -:   66:  receives a string and authenticates it against the latest password in the
        -:   67:  pass_history, returning true for an exact match or false when it does not match
        -:   68:  or if a password has not been set.
        -:   69:  */
        7:   70:  bool Password::authenticate(string x){
        7:   71:    if (x == pass_history[pass_history.size() - 1]){
        3:   72:      return true;
        -:   73:    }
        4:   74:    return false;
        -:   75:  }
